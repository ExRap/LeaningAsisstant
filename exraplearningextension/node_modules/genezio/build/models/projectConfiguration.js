"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectConfiguration = exports.SdkConfiguration = exports.ClassConfiguration = exports.MethodConfiguration = exports.ParameterType = void 0;
const yamlProjectConfiguration_1 = require("./yamlProjectConfiguration");
class ParameterType {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
}
exports.ParameterType = ParameterType;
class MethodConfiguration {
    constructor(name, parameters, type, cronString) {
        this.name = name;
        this.parameters = parameters.map((parameter) => new ParameterType(parameter, "any"));
        this.type = type !== null && type !== void 0 ? type : yamlProjectConfiguration_1.TriggerType.jsonrpc;
        this.cronString = cronString;
    }
}
exports.MethodConfiguration = MethodConfiguration;
class ClassConfiguration {
    constructor(name, path, type, language, methods) {
        this.name = name;
        this.path = path;
        this.type = type;
        this.methods = methods;
        this.language = language;
    }
}
exports.ClassConfiguration = ClassConfiguration;
class SdkConfiguration {
    constructor(language, runtime, path) {
        this.language = language;
        this.options = {};
        this.options.runtime = runtime || null;
        this.path = path;
    }
}
exports.SdkConfiguration = SdkConfiguration;
/**
 * This class represents the complete image of the project.
 *
 * It combines information from the YAML configuration with the information from the AST Summary.
 */
class ProjectConfiguration {
    constructor(yamlConfiguration, astSummary) {
        this.name = yamlConfiguration.name;
        this.region = yamlConfiguration.region;
        this.sdk = yamlConfiguration.sdk;
        this.cloudProvider = yamlConfiguration.cloudProvider || "aws";
        this.classes = astSummary.classes.map((c) => {
            var _a;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const yamlClass = yamlConfiguration.classes.find((yamlC) => yamlC.path === c.path);
            const methods = c === null || c === void 0 ? void 0 : c.methods.map((m) => {
                const yamlMethod = yamlClass.methods.find((yamlM) => yamlM.name === m.name);
                return {
                    name: m.name,
                    parameters: m.params.map((p) => new ParameterType(p.name, p.type)),
                    cronString: yamlMethod === null || yamlMethod === void 0 ? void 0 : yamlMethod.cronString,
                    type: yamlClass === null || yamlClass === void 0 ? void 0 : yamlClass.getMethodType(m.name)
                };
            });
            return {
                name: c.name,
                path: c.path,
                type: (_a = yamlClass === null || yamlClass === void 0 ? void 0 : yamlClass.type) !== null && _a !== void 0 ? _a : yamlProjectConfiguration_1.TriggerType.jsonrpc,
                language: yamlClass.language,
                methods: methods,
            };
        });
    }
}
exports.ProjectConfiguration = ProjectConfiguration;
