"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _NodeJsBundler_instances, _NodeJsBundler_copyDependencies, _NodeJsBundler_copyNonJsFiles, _NodeJsBundler_bundleJavascriptCode, _NodeJsBundler_getClassDetails;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeJsBundler = void 0;
const webpack_1 = require("webpack");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const webpack_node_externals_1 = __importDefault(require("webpack-node-externals"));
const file_1 = require("../utils/file");
const commands_1 = require("../commands");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lambdaHander_1 = require("../utils/lambdaHander");
class NodeJsBundler {
    constructor() {
        _NodeJsBundler_instances.add(this);
    }
    bundle(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const temporaryFolder = yield (0, file_1.createTemporaryFolder)();
            const dependenciesInfo = yield (0, commands_1.getNodeModules)(input.path);
            // 1. Run webpack and get the packed file
            yield __classPrivateFieldGet(this, _NodeJsBundler_instances, "m", _NodeJsBundler_bundleJavascriptCode).call(this, input.configuration.path, temporaryFolder);
            // 2. Copy non js files
            yield __classPrivateFieldGet(this, _NodeJsBundler_instances, "m", _NodeJsBundler_copyNonJsFiles).call(this, temporaryFolder);
            // 3. Copy node_modules
            yield __classPrivateFieldGet(this, _NodeJsBundler_instances, "m", _NodeJsBundler_copyDependencies).call(this, dependenciesInfo, temporaryFolder);
            // 4. Get class name
            const classDetails = __classPrivateFieldGet(this, _NodeJsBundler_instances, "m", _NodeJsBundler_getClassDetails).call(this, input.path, temporaryFolder);
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            return Object.assign(Object.assign({}, input), { path: temporaryFolder, extra: {
                    className: classDetails.className,
                    methodNames: classDetails.methodNames,
                    dependenciesInfo
                } });
        });
    }
}
exports.NodeJsBundler = NodeJsBundler;
_NodeJsBundler_instances = new WeakSet(), _NodeJsBundler_copyDependencies = function _NodeJsBundler_copyDependencies(dependenciesInfo, tempFolderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodeModulesPath = path_1.default.join(tempFolderPath, "node_modules");
        // copy all dependencies to node_modules folder
        for (const dependency of dependenciesInfo) {
            const dependencyPath = path_1.default.join(nodeModulesPath, dependency.name);
            fs_extra_1.default.copySync(dependency.path, dependencyPath);
        }
    });
}, _NodeJsBundler_copyNonJsFiles = function _NodeJsBundler_copyNonJsFiles(tempFolderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const allNonJsFilesPaths = (yield (0, file_1.getAllFilesFromCurrentPath)())
            .filter((file) => {
            // filter js files, node_modules and folders
            return (file.extension !== ".js" &&
                path_1.default.basename(file.path) !== "package.json" &&
                path_1.default.basename(file.path) !== "package-lock.json" &&
                !file.path.includes("node_modules") &&
                !fs_1.default.lstatSync(file.path).isDirectory());
        });
        // iterare over all non js files and copy them to tmp folder
        allNonJsFilesPaths.forEach((filePath, key) => {
            // get folders array
            const folders = filePath.path.split(path_1.default.sep);
            // remove file name from folders array
            folders.pop();
            // create folder structure in tmp folder
            const folderPath = path_1.default.join(tempFolderPath, ...folders);
            if (!fs_1.default.existsSync(folderPath)) {
                fs_1.default.mkdirSync(folderPath, { recursive: true });
            }
            // copy file to tmp folder
            const fileDestinationPath = path_1.default.join(tempFolderPath, filePath.path);
            fs_1.default.copyFileSync(filePath.path, fileDestinationPath);
        });
    });
}, _NodeJsBundler_bundleJavascriptCode = function _NodeJsBundler_bundleJavascriptCode(filePath, tempFolderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const { name } = (0, file_1.getFileDetails)(filePath);
            const outputFile = `module.js`;
            const compiler = (0, webpack_1.webpack)({
                entry: "./" + filePath,
                target: "node",
                externals: [(0, webpack_node_externals_1.default)()],
                mode: "production",
                node: false,
                optimization: {
                    minimize: false
                },
                module: {
                    rules: [
                        {
                            test: /\.html$/,
                            loader: "dumb-loader",
                            exclude: /really\.html/
                        }
                    ]
                },
                // compilation stats json
                output: {
                    path: tempFolderPath,
                    filename: outputFile,
                    library: "genezio",
                    libraryTarget: "commonjs"
                }
            });
            compiler.run((error, stats) => __awaiter(this, void 0, void 0, function* () {
                if (error) {
                    console.error(error);
                    reject(error);
                    return;
                }
                if (stats === null || stats === void 0 ? void 0 : stats.hasErrors()) {
                    reject(stats === null || stats === void 0 ? void 0 : stats.compilation.getErrors());
                    return;
                }
                (0, file_1.writeToFile)(tempFolderPath, "index.js", lambdaHander_1.lambdaHandler);
                compiler.close((closeErr) => {
                    /* TODO: handle error? */
                });
                resolve();
            }));
        }));
    });
}, _NodeJsBundler_getClassDetails = function _NodeJsBundler_getClassDetails(filePath, tempFolderPath) {
    const moduleJsPath = path_1.default.join(tempFolderPath, "module.js");
    const module = require(moduleJsPath);
    const className = Object.keys(module.genezio)[0];
    console.log(className);
    if (Object.keys(module.genezio).length > 1) {
        console.log("\x1b[33m", `Warning: We found multiple classes exported from the ${filePath} file. For now, we support only one class per file.`);
        console.log("\x1b[0m", "");
    }
    if (!className) {
        throw new Error(`No class was found in the ${filePath} file. Make sure you exported the class.`);
    }
    const methodNames = Object.getOwnPropertyNames(module.genezio[className].prototype).filter((x) => x !== "constructor");
    return {
        className,
        methodNames
    };
};
