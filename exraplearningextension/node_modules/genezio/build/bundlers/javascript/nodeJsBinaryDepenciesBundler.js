"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _NodeJsBinaryDependenciesBundler_instances, _NodeJsBinaryDependenciesBundler_handleBinaryDependencies;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeJsBinaryDependenciesBundler = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const file_1 = require("../../utils/file");
const loglevel_1 = __importDefault(require("loglevel"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const exec = util_1.default.promisify(require("child_process").exec);
class NodeJsBinaryDependenciesBundler {
    constructor() {
        _NodeJsBinaryDependenciesBundler_instances.add(this);
    }
    bundle(input) {
        if (!input.extra) {
            return Promise.resolve(input);
        }
        // 4. Redownload binary dependencies if necessary
        __classPrivateFieldGet(this, _NodeJsBinaryDependenciesBundler_instances, "m", _NodeJsBinaryDependenciesBundler_handleBinaryDependencies).call(this, input.extra.dependenciesInfo, input.path);
        return Promise.resolve(input);
    }
}
exports.NodeJsBinaryDependenciesBundler = NodeJsBinaryDependenciesBundler;
_NodeJsBinaryDependenciesBundler_instances = new WeakSet(), _NodeJsBinaryDependenciesBundler_handleBinaryDependencies = function _NodeJsBinaryDependenciesBundler_handleBinaryDependencies(dependenciesInfo, tempFolderPath) {
    return __awaiter(this, void 0, void 0, function* () {
        // create node_modules folder in tmp folder
        const nodeModulesPath = path_1.default.join(tempFolderPath, "node_modules");
        const binaryDependencies = [];
        if (!fs_1.default.existsSync(nodeModulesPath)) {
            fs_1.default.mkdirSync(nodeModulesPath, { recursive: true });
        }
        // copy all dependencies to node_modules folder
        for (const dependency of dependenciesInfo) {
            const dependencyPath = path_1.default.join(nodeModulesPath, dependency.name);
            // read package.json file
            if (dependency.name[0] === "@") {
                // Get List of all files in a directory
                const files = fs_1.default.readdirSync(dependencyPath);
                // iterate files and check if there is a package.json file
                for (const file of files) {
                    const packageJsonPath = path_1.default.join(dependencyPath, file, "package.json");
                    if (yield (0, file_1.fileExists)(packageJsonPath)) {
                        const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, "utf8"));
                        if (packageJson.binary) {
                            binaryDependencies.push({
                                path: path_1.default.join(dependencyPath, file),
                                name: file
                            });
                        }
                    }
                }
            }
            else {
                const packageJsonPath = path_1.default.join(dependencyPath, "package.json");
                const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, "utf8"));
                // check if package.json has binary property
                if (packageJson.binary) {
                    binaryDependencies.push({
                        path: dependencyPath,
                        name: dependency.name
                    });
                }
            }
        }
        if (binaryDependencies.length > 0) {
            yield exec("npm i node-addon-api", {
                cwd: tempFolderPath
            });
            yield exec("npm i @mapbox/node-pre-gyp", {
                cwd: tempFolderPath
            });
        }
        for (const dependency of binaryDependencies) {
            try {
                const { stdout, stderr } = yield exec("npx node-pre-gyp --update-binary --fallback-to-build --target_arch=x64 --target_platform=linux --target_libc=glibc clean install " +
                    dependency.name, { cwd: dependency.path });
            }
            catch (error) {
                loglevel_1.default.error("An error has occured while installing binary dependecies.");
                throw new Error("An error has occured while installing binary dependecies.");
            }
        }
    });
};
