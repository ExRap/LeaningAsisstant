"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSdkHandler = exports.handleLogin = exports.init = exports.reportSuccess = exports.deployFrontend = exports.deployClasses = exports.deleteProjectHandler = exports.lsHandler = exports.addNewClass = void 0;
const path_1 = __importDefault(require("path"));
const deployCode_1 = require("./requests/deployCode");
const generateSdk_1 = __importDefault(require("./requests/generateSdk"));
const listProjects_1 = __importDefault(require("./requests/listProjects"));
const deleteProject_1 = __importDefault(require("./requests/deleteProject"));
const file_1 = require("./utils/file");
const prompt_1 = require("./utils/prompt");
const yaml_1 = require("yaml");
const yamlProjectConfiguration_1 = require("./models/yamlProjectConfiguration");
const configuration_1 = require("./utils/configuration");
const logging_1 = require("./utils/logging");
const variables_1 = require("./variables");
const loglevel_1 = __importDefault(require("loglevel"));
const http_1 = __importDefault(require("http"));
const json_1 = __importDefault(require("body/json"));
const process_1 = require("process");
const open_1 = __importDefault(require("open"));
const nodeJsBundler_1 = require("./bundlers/javascript/nodeJsBundler");
const nodeTsBundler_1 = require("./bundlers/typescript/nodeTsBundler");
const nodeJsBinaryDependenciesBundler_1 = require("./bundlers/javascript/nodeJsBinaryDependenciesBundler");
const nodeTsBinaryDependenciesBundler_1 = require("./bundlers/typescript/nodeTsBinaryDependenciesBundler");
const languages_1 = require("./utils/languages");
const accounts_1 = require("./utils/accounts");
const getPresignedURL_1 = require("./requests/getPresignedURL");
const uploadContentToS3_1 = require("./requests/uploadContentToS3");
const moment_1 = __importDefault(require("moment"));
const cli_spinner_1 = require("cli-spinner");
const logging_2 = require("./utils/logging");
const bundlerComposer_1 = require("./bundlers/bundlerComposer");
const projectConfiguration_1 = require("./models/projectConfiguration");
const sdk_1 = require("./utils/sdk");
const getFrontendPresignedURL_1 = require("./requests/getFrontendPresignedURL");
const getProjectInfo_1 = __importDefault(require("./requests/getProjectInfo"));
const yaml_2 = require("./utils/yaml");
function addNewClass(classPath, classType) {
    return __awaiter(this, void 0, void 0, function* () {
        if (classType === undefined) {
            classType = "jsonrpc";
        }
        else if (!["http", "jsonrpc"].includes(classType)) {
            throw new Error("Invalid class type. Valid class types are 'http' and 'jsonrpc'.");
        }
        if (classPath === undefined || classPath === "") {
            loglevel_1.default.error("Please provide a path to the class you want to add.");
            return;
        }
        const projectConfiguration = yield (0, configuration_1.getProjectConfiguration)();
        const className = classPath.split(path_1.default.sep).pop();
        if (!className) {
            loglevel_1.default.error("Invalid class path.");
            return;
        }
        const classExtension = className.split(".").pop();
        if (!classExtension || className.split(".").length < 2) {
            loglevel_1.default.error("Invalid class extension.");
            return;
        }
        // check if class already exists
        if (projectConfiguration.classes.length > 0) {
            if (projectConfiguration.classes
                .map((c) => c.path.split(path_1.default.sep).pop())
                .includes(className)) {
                loglevel_1.default.error("Class already exists.");
                return;
            }
        }
        // create the file if it does not exist
        if (!(yield (0, file_1.fileExists)(classPath))) {
            yield (0, file_1.writeToFile)(".", classPath, "", true).catch((error) => {
                loglevel_1.default.error(error.toString());
                throw error;
            });
        }
        projectConfiguration.addClass(classPath, classType, []);
        yield projectConfiguration.writeToFile();
        loglevel_1.default.info("\x1b[36m%s\x1b[0m", "Class added successfully.");
    });
}
exports.addNewClass = addNewClass;
function lsHandler(identifier, l) {
    return __awaiter(this, void 0, void 0, function* () {
        // show prompt if no project id is selected
        const spinner = new cli_spinner_1.Spinner("%s  ");
        spinner.setSpinnerString("|/-\\");
        spinner.start();
        let projectsJson = yield (0, listProjects_1.default)();
        spinner.stop();
        loglevel_1.default.info("");
        if (projectsJson.length == 0) {
            loglevel_1.default.info("There are no currently deployed projects.");
            return;
        }
        if (identifier.trim().length !== 0) {
            projectsJson = projectsJson.filter((project) => project.name === identifier || project.id === identifier);
            if (projectsJson.length == 0) {
                loglevel_1.default.info("There is no project with this identifier.");
                return;
            }
        }
        projectsJson.forEach(function (project, index) {
            if (l) {
                loglevel_1.default.info(`[${1 + index}]: Project name: ${project.name},\n\tRegion: ${project.region},\n\tID: ${project.id},\n\tCreated: ${moment_1.default
                    .unix(project.createdAt)
                    .format()},\n\tUpdated: ${moment_1.default.unix(project.updatedAt).format()}`);
            }
            else {
                loglevel_1.default.info(`[${1 + index}]: Project name: ${project.name}, Region: ${project.region}, Updated: ${moment_1.default.unix(project.updatedAt).format()}`);
            }
        });
    });
}
exports.lsHandler = lsHandler;
function deleteProjectHandler(projectId, forced) {
    return __awaiter(this, void 0, void 0, function* () {
        // show prompt if no project id is selected
        if (typeof projectId === "string" && projectId.trim().length === 0) {
            const spinner = new cli_spinner_1.Spinner("%s  ");
            spinner.setSpinnerString("|/-\\");
            spinner.start();
            const projectsJson = yield (0, listProjects_1.default)();
            spinner.stop();
            // hack to add a newline  after the spinner
            loglevel_1.default.info("");
            const projects = projectsJson.map(function (project, index) {
                return `[${1 + index}]: Project name: ${project.name}, Region: ${project.region}, ID: ${project.id}`;
            });
            if (projects.length === 0) {
                loglevel_1.default.info("There are no currently deployed projects.");
                return false;
            }
            else {
                loglevel_1.default.info("No project ID specified, select an ID to delete from this list:");
                loglevel_1.default.info(projects);
            }
            const selection = yield (0, prompt_1.askQuestion)(`Please select project number to delete (1--${projects.length}) [none]: `, "");
            const selectionNum = Number(selection);
            if (isNaN(selectionNum) ||
                selectionNum <= 0 ||
                selectionNum > projects.length) {
                loglevel_1.default.info("No valid selection was made, aborting.");
                return false;
            }
            else {
                forced = false;
                // get the project id from the selection
                projectId = projects[selectionNum - 1].split(":")[4].trim();
            }
        }
        if (!forced) {
            const confirmation = yield (0, prompt_1.askQuestion)(`Are you sure you want to delete project ${projectId}? y/[N]: `, "n");
            if (confirmation !== "y" && confirmation !== "Y") {
                loglevel_1.default.warn("Aborted operation.");
                return false;
            }
        }
        const status = yield (0, deleteProject_1.default)(projectId);
        return status;
    });
}
exports.deleteProjectHandler = deleteProjectHandler;
function deployClasses() {
    return __awaiter(this, void 0, void 0, function* () {
        const configuration = yield (0, configuration_1.getProjectConfiguration)();
        if (configuration.classes.length === 0) {
            throw new Error("You don't have any class in specified in the genezio.yaml configuration file. Add a class with 'genezio addClass <className> <classType>' field and then call again 'genezio deploy'.");
        }
        loglevel_1.default.info("Deploying your backend project to genezio infrastructure...");
        const sdkResponse = yield (0, generateSdk_1.default)(configuration).catch((error) => {
            throw error;
        });
        const projectConfiguration = new projectConfiguration_1.ProjectConfiguration(configuration, sdkResponse.astSummary);
        (0, logging_1.printAdaptiveLog)("Bundling your code and uploading it", "start");
        const promisesDeploy = projectConfiguration.classes.map((element) => __awaiter(this, void 0, void 0, function* () {
            if (!(yield (0, file_1.fileExists)(element.path))) {
                (0, logging_1.printAdaptiveLog)("Bundling your code and uploading it", "error");
                loglevel_1.default.error(`\`${element.path}\` file does not exist at the indicated path.`);
                (0, process_1.exit)(1);
            }
            let bundler;
            switch (element.language) {
                case ".ts": {
                    const standardBundler = new nodeTsBundler_1.NodeTsBundler();
                    const binaryDepBundler = new nodeTsBinaryDependenciesBundler_1.NodeTsBinaryDependenciesBundler();
                    bundler = new bundlerComposer_1.BundlerComposer([standardBundler, binaryDepBundler]);
                    break;
                }
                case ".js": {
                    const standardBundler = new nodeJsBundler_1.NodeJsBundler();
                    const binaryDepBundler = new nodeJsBinaryDependenciesBundler_1.NodeJsBinaryDependenciesBundler();
                    bundler = new bundlerComposer_1.BundlerComposer([standardBundler, binaryDepBundler]);
                    break;
                }
                default:
                    loglevel_1.default.error(`Unsupported ${element.language}`);
                    return Promise.resolve();
            }
            logging_2.debugLogger.debug(`The bundling process has started for file ${element.path}...`);
            const output = yield bundler.bundle({
                configuration: element,
                path: element.path,
                extra: {
                    mode: "production"
                }
            });
            logging_2.debugLogger.debug(`The bundling process finished successfully for file ${element.path}.`);
            const archivePath = path_1.default.join(yield (0, file_1.createTemporaryFolder)("genezio-"), `genezioDeploy.zip`);
            logging_2.debugLogger.debug(`Zip the directory ${output.path}.`);
            yield (0, file_1.zipDirectory)(output.path, archivePath);
            logging_2.debugLogger.debug(`Get the presigned URL for class name ${element.name}.`);
            const resultPresignedUrl = yield (0, getPresignedURL_1.getPresignedURL)(configuration.region, "genezioDeploy.zip", configuration.name, element.name);
            logging_2.debugLogger.debug(`Upload the content to S3 for file ${element.path}.`);
            yield (0, uploadContentToS3_1.uploadContentToS3)(resultPresignedUrl.presignedURL, archivePath);
            logging_2.debugLogger.debug(`Done uploading the content to S3 for file ${element.path}.`);
        }));
        // wait for all promises to finish
        yield Promise.all(promisesDeploy);
        (0, logging_1.printAdaptiveLog)("Bundling your code and uploading it", "end");
        const response = yield (0, deployCode_1.deployRequest)(projectConfiguration);
        const classesInfo = response.classes.map((c) => ({
            className: c.name,
            methods: c.methods,
            functionUrl: c.cloudUrl,
            projectId: response.projectId
        }));
        reportSuccess(classesInfo, sdkResponse);
        yield (0, sdk_1.replaceUrlsInSdk)(sdkResponse, response.classes);
        yield (0, sdk_1.writeSdkToDisk)(sdkResponse, configuration.sdk.language, configuration.sdk.path);
        const projectId = classesInfo[0].projectId;
        console.log(`Your backend project has been deployed and is available at ${variables_1.REACT_APP_BASE_URL}/project/${projectId}`);
    });
}
exports.deployClasses = deployClasses;
function deployFrontend() {
    return __awaiter(this, void 0, void 0, function* () {
        const configuration = yield (0, configuration_1.getProjectConfiguration)();
        if (configuration.frontend) {
            if (!configuration.frontend.subdomain) {
                loglevel_1.default.info("No subdomain specified in the genezio.yaml configuration file. We will provide a random one for you.");
                configuration.frontend.subdomain = (0, yaml_2.generateRandomSubdomain)();
                // write the configuration in yaml file
                yield configuration.addSubdomain(configuration.frontend.subdomain);
            }
            logging_2.debugLogger.debug("Getting presigned URL...");
            const result = yield (0, getFrontendPresignedURL_1.getFrontendPresignedURL)(configuration.frontend.subdomain, configuration.name);
            if (!result.presignedURL) {
                throw new Error("An error occured (missing presignedUrl). Please try again!");
            }
            if (!result.userId) {
                throw new Error("An error occured (missing userId). Please try again!");
            }
            const archivePath = path_1.default.join(yield (0, file_1.createTemporaryFolder)("genezio-"), `${configuration.frontend.subdomain}.zip`);
            logging_2.debugLogger.debug("Creating temporary folder", archivePath);
            yield (0, file_1.zipDirectoryToDestinationPath)(configuration.frontend.path, configuration.frontend.subdomain, archivePath);
            logging_2.debugLogger.debug("Content of the folder zipped. Uploading to S3.");
            yield (0, uploadContentToS3_1.uploadContentToS3)(result.presignedURL, archivePath, result.userId);
            logging_2.debugLogger.debug("Uploaded to S3.");
        }
        else {
            throw new Error("No frontend entry in genezio configuration file.");
        }
        return `https://${configuration.frontend.subdomain}.${variables_1.FRONTEND_DOMAIN}`;
    });
}
exports.deployFrontend = deployFrontend;
function reportSuccess(classesInfo, sdkResponse) {
    if (sdkResponse.classFiles.length > 0) {
        loglevel_1.default.info("\x1b[36m%s\x1b[0m", "Your code was deployed and the SDK was successfully generated!");
    }
    else {
        loglevel_1.default.info("\x1b[36m%s\x1b[0m", "Your code was successfully deployed!");
    }
    // print function urls
    let printHttpString = "";
    classesInfo.forEach((classInfo) => {
        classInfo.methods.forEach((method) => {
            if (method.type === yamlProjectConfiguration_1.TriggerType.http) {
                printHttpString +=
                    `  - ${classInfo.className}.${method.name}: ${classInfo.functionUrl}${classInfo.className}/${method.name}` +
                        "\n";
            }
        });
    });
    if (printHttpString !== "") {
        loglevel_1.default.info("");
        loglevel_1.default.info("HTTP Methods Deployed:");
        loglevel_1.default.info(printHttpString);
    }
}
exports.reportSuccess = reportSuccess;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        let projectName = "";
        while (projectName.length === 0) {
            projectName = yield (0, prompt_1.askQuestion)(`What is the name of the project: `);
            if (projectName.length === 0) {
                loglevel_1.default.error("The project name can't be empty.");
            }
        }
        const configFile = {
            name: projectName,
            region: "us-east-1",
            sdk: { options: {} },
            classes: []
        };
        const sdkLanguage = yield (0, prompt_1.askQuestion)(`In what programming language do you want your SDK? (js, ts or swift) [default value: js]: `, "js");
        if (!languages_1.languages.includes(sdkLanguage)) {
            throw Error(`We don't currently support the ${sdkLanguage} language. You can open an issue ticket at https://github.com/Genez-io/genezio/issues.`);
        }
        configFile.sdk.language = sdkLanguage;
        if (sdkLanguage === "js" || sdkLanguage === "ts") {
            const runtime = yield (0, prompt_1.askQuestion)(`What runtime will you use? Options: "node" or "browser". [default value: node]: `, "node");
            if (runtime !== "node" && runtime !== "browser") {
                throw Error(`We don't currently support this JS runtime ${runtime}.`);
            }
            configFile.sdk.options.runtime = runtime;
        }
        const path = yield (0, prompt_1.askQuestion)(`Where do you want to save your SDK? [default value: ./sdk/]: `, "./sdk/");
        configFile.sdk.path = path;
        const doc = new yaml_1.Document(configFile);
        doc.commentBefore = `File that configures what classes will be deployed in Genezio Infrastructure.
Add the paths to classes that you want to deploy in "classes".

Example:

name: hello-world
region: us-east-1
sdk:
  language: js
  options:
    runtime: node
  path: ./sdk/
classes:
  - path: ./hello.js
    type: jsonrpc
    methods:
      - name: hello
        type: http`;
        const yamlConfigurationFileContent = doc.toString();
        yield (0, file_1.writeToFile)(".", "genezio.yaml", yamlConfigurationFileContent).catch((error) => {
            loglevel_1.default.error(error.toString());
        });
        loglevel_1.default.info("");
        loglevel_1.default.info("\x1b[36m%s\x1b[0m", "Your genezio project was successfully initialized!");
        loglevel_1.default.info("");
        loglevel_1.default.info("The genezio.yaml configuration file was generated. You can now add the classes that you want to deploy using the 'genezio addClass <className> <classType>' command.");
        loglevel_1.default.info("");
    });
}
exports.init = init;
function handleLogin(accessToken) {
    return __awaiter(this, void 0, void 0, function* () {
        if (accessToken !== "") {
            (0, accounts_1.saveAuthToken)(accessToken);
        }
        else {
            const server = http_1.default.createServer((req, res) => {
                res.setHeader("Access-Control-Allow-Origin", "*");
                res.setHeader("Access-Control-Allow-Headers", "Content-Type");
                res.setHeader("Access-Control-Allow-Methods", "POST");
                res.setHeader("Access-Control-Allow-Credentials", "true");
                if (req.method === "OPTIONS") {
                    res.end();
                    return;
                }
                (0, json_1.default)(req, res, (err, body) => {
                    const params = new URLSearchParams(req.url);
                    const token = params.get("/?token");
                    (0, accounts_1.saveAuthToken)(token).then(() => {
                        loglevel_1.default.info(`Welcome! You can now start using genezio.`);
                        res.setHeader("Access-Control-Allow-Origin", "*");
                        res.setHeader("Access-Control-Allow-Headers", "Content-Type");
                        res.setHeader("Access-Control-Allow-Methods", "POST");
                        res.setHeader("Access-Control-Allow-Credentials", "true");
                        res.writeHead(301, {
                            Location: `${variables_1.REACT_APP_BASE_URL}/cli/login/success`
                        });
                        res.end();
                        (0, process_1.exit)(0);
                    });
                });
            });
            const promise = new Promise((resolve) => {
                server.listen(0, "localhost", () => {
                    loglevel_1.default.info("Redirecting to browser to complete authentication...");
                    const address = server.address();
                    resolve(address.port);
                });
            });
            const port = yield promise;
            const browserUrl = `${variables_1.REACT_APP_BASE_URL}/cli/login?redirect_url=http://localhost:${port}/`;
            (0, open_1.default)(browserUrl);
        }
    });
}
exports.handleLogin = handleLogin;
function generateSdkHandler(language, path) {
    return __awaiter(this, void 0, void 0, function* () {
        const configuration = yield (0, configuration_1.getProjectConfiguration)();
        configuration.sdk.language = language;
        configuration.sdk.path = path;
        if (configuration.classes.length === 0) {
            throw new Error("You don't have any class in specified in the genezio.yaml configuration file. Add a class with 'genezio addClass <className> <classType>'.");
        }
        const sdkResponse = yield (0, generateSdk_1.default)(configuration).catch((error) => {
            throw error;
        });
        // get all project classes
        const projects = yield (0, listProjects_1.default)(0).catch((error) => {
            throw error;
        });
        // check if the project exists with the configuration project name, region
        const project = projects.find((project) => project.name === configuration.name &&
            project.region === configuration.region);
        if (!project) {
            throw new Error(`The project ${configuration.name} doesn't exist in the region ${configuration.region}. You must deploy it first with 'genezio deploy'.`);
        }
        // get project info
        const completeProjectInfo = yield (0, getProjectInfo_1.default)(project.id).catch((error) => {
            throw error;
        });
        const classUrlMap = [];
        completeProjectInfo.classes.forEach((classInfo) => {
            classUrlMap.push({
                name: classInfo.name,
                cloudUrl: classInfo.cloudUrl
            });
        });
        yield (0, sdk_1.replaceUrlsInSdk)(sdkResponse, classUrlMap);
        yield (0, sdk_1.writeSdkToDisk)(sdkResponse, configuration.sdk.language, configuration.sdk.path);
    });
}
exports.generateSdkHandler = generateSdkHandler;
