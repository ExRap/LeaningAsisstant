"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const axios_1 = __importDefault(require("./axios"));
const file_1 = require("../utils/file");
const variables_1 = require("../variables");
const logging_1 = require("../utils/logging");
const accounts_1 = require("../utils/accounts");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pjson = require("../../package.json");
function generateSdkRequest(configuration) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const classes = configuration.classes;
        const sdkOutputPath = configuration.sdk.path;
        // check if the output path exists
        if (yield (0, file_1.fileExists)(configuration.sdk.path)) {
            // delete the output path
            fs_1.default.rmSync(sdkOutputPath, { recursive: true, force: true });
        }
        const form = new form_data_1.default();
        form.append("projectConfiguration", JSON.stringify(configuration));
        const authToken = yield (0, accounts_1.getAuthToken)();
        if (!authToken) {
            throw new Error("You are not logged in. Run 'genezio login' before you deploy your function.");
        }
        classes.forEach((classElem) => {
            const filePath = classElem.path;
            form.append(filePath, fs_1.default.createReadStream(filePath));
        });
        const sectionMessage = "Generating your SDK";
        (0, logging_1.printAdaptiveLog)(sectionMessage, "start");
        const response = yield (0, axios_1.default)({
            method: "post",
            url: `${variables_1.GENERATE_SDK_API_URL}/js/generateSdk`,
            data: form,
            timeout: 100000,
            headers: Object.assign(Object.assign({}, form.getHeaders()), { Authorization: `Bearer ${authToken}`, "Accept-Version": `genezio-cli/${pjson.version}` })
        }).catch((error) => {
            (0, logging_1.printAdaptiveLog)(sectionMessage, "error");
            throw error;
        });
        (0, logging_1.printAdaptiveLog)(sectionMessage, "end");
        if ((_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) {
            throw new Error(response.data.error.message);
        }
        return response.data;
    });
}
exports.default = generateSdkRequest;
