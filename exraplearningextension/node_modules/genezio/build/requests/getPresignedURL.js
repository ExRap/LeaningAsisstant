"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPresignedURL = void 0;
const axios_1 = __importDefault(require("./axios"));
const accounts_1 = require("../utils/accounts");
const variables_1 = require("../variables");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pjson = require("../../package.json");
function getPresignedURL(region = "us-east-1", archiveName = "genezioDeploy.zip", projectName, className) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (!region || !archiveName || !projectName || !className) {
            throw new Error("Missing required parameters");
        }
        // Check if user is authenticated
        const authToken = yield (0, accounts_1.getAuthToken)();
        if (!authToken) {
            throw new Error("You are not logged in. Run 'genezio login' before you deploy your function.");
        }
        const json = JSON.stringify({
            projectName: projectName,
            className: className,
            filename: archiveName,
            region: region,
        });
        const response = yield (0, axios_1.default)({
            method: "GET",
            url: `${variables_1.BACKEND_ENDPOINT}/core/deployment-url`,
            data: json,
            headers: {
                Authorization: `Bearer ${authToken}`,
                "Accept-Version": `genezio-cli/${pjson.version}`
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        }).catch((error) => {
            throw error;
        });
        if (response.data.status === "error") {
            throw new Error(response.data.message);
        }
        if ((_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) {
            throw new Error(response.data.error.message);
        }
        return response.data;
    });
}
exports.getPresignedURL = getPresignedURL;
