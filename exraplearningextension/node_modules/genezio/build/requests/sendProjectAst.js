"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendProjectAst = void 0;
const axios_1 = __importDefault(require("axios"));
const accounts_1 = require("../utils/accounts");
const variables_1 = require("../variables");
function sendProjectAst(projectName, region = "us-east-1", astSummary) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (!astSummary) {
            throw new Error("Ast summary is not provided");
        }
        // Check if user is authenticated
        const authToken = yield (0, accounts_1.getAuthToken)();
        if (!authToken) {
            throw new Error("You are not logged in. Run 'genezio login' before you deploy your function.");
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const json = astSummary;
        json.projectName = projectName;
        json.region = region;
        json.classes = json.classes.map((c) => {
            return {
                name: c.name,
                ast: JSON.stringify({ methods: c.methods })
            };
        });
        const rawData = JSON.stringify(json);
        const response = yield (0, axios_1.default)({
            method: "POST",
            url: `${variables_1.BACKEND_ENDPOINT}/projects/ast`,
            data: rawData,
            headers: { Authorization: `Bearer ${authToken}` },
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        }).catch((error) => {
            throw error;
        });
        if (response.data.status === "error") {
            throw new Error(response.data.message);
        }
        if ((_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) {
            throw new Error(response.data.error.message);
        }
        return response.data;
    });
}
exports.sendProjectAst = sendProjectAst;
