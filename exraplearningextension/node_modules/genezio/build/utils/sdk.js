"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeSdkToDisk = exports.replaceUrlsInSdk = void 0;
const file_1 = require("./file");
const logging_1 = require("./logging");
const loglevel_1 = __importDefault(require("loglevel"));
/**
 * Replace the temporary markdowns from the SDK with actual URLs.
 */
function replaceUrlsInSdk(sdkResponse, classUrlMap) {
    return __awaiter(this, void 0, void 0, function* () {
        sdkResponse.classFiles.forEach((c) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const classContent = classUrlMap.find((classFile) => {
                return classFile.name === c.name;
            });
            c.implementation = c.implementation.replace("%%%link_to_be_replace%%%", classContent.cloudUrl);
        });
    });
}
exports.replaceUrlsInSdk = replaceUrlsInSdk;
/**
 * Write the SDK files to disk.
 */
function writeSdkToDisk(sdk, language, outputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (sdk.classFiles.length == 0) {
            logging_1.debugLogger.debug("No SDK classes found...");
            return;
        }
        logging_1.debugLogger.debug("Writing the SDK to files...");
        if (sdk.remoteFile) {
            yield (0, file_1.writeToFile)(outputPath, `remote.${language}`, sdk.remoteFile, true).catch((error) => {
                loglevel_1.default.error(error.toString());
            });
        }
        yield Promise.all(sdk.classFiles.map((classFile) => {
            let filename = `${classFile.name}.sdk.${language}`;
            filename = filename.charAt(0).toLowerCase() + filename.slice(1);
            return (0, file_1.writeToFile)(outputPath, filename, classFile.implementation, true);
        }));
        logging_1.debugLogger.debug("The SDK was successfully written to files.");
    });
}
exports.writeSdkToDisk = writeSdkToDisk;
