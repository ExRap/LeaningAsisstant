"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAuthToken = exports.saveAuthToken = exports.getAuthToken = void 0;
const file_1 = require("./file");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const logging_1 = require("./logging");
function getAuthToken() {
    return __awaiter(this, void 0, void 0, function* () {
        const homeDirectory = os_1.default.homedir();
        const loginConfigFilePath = path_1.default.join(homeDirectory, ".geneziorc");
        try {
            const result = yield (0, file_1.readUTF8File)(loginConfigFilePath);
            return result.trim();
        }
        catch (error) {
            logging_1.debugLogger.debug(`An error occured during getAuthToken ${error}`);
            return undefined;
        }
    });
}
exports.getAuthToken = getAuthToken;
function saveAuthToken(token) {
    return __awaiter(this, void 0, void 0, function* () {
        const homeDirectory = os_1.default.homedir();
        const loginConfigFile = ".geneziorc";
        yield (0, file_1.writeToFile)(homeDirectory, loginConfigFile, token, true);
    });
}
exports.saveAuthToken = saveAuthToken;
function removeAuthToken() {
    return __awaiter(this, void 0, void 0, function* () {
        const homeDirectory = os_1.default.homedir();
        const loginConfigFilePath = path_1.default.join(homeDirectory, ".geneziorc");
        return new Promise((resolve, reject) => {
            fs_1.default.unlink(loginConfigFilePath, (error) => {
                if (error) {
                    reject(error);
                }
                resolve();
            });
        });
    });
}
exports.removeAuthToken = removeAuthToken;
