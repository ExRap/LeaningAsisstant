"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectConfiguration = void 0;
const path_1 = __importDefault(require("path"));
const yamlProjectConfiguration_1 = require("../models/yamlProjectConfiguration");
const file_1 = require("./file");
const yaml_1 = require("yaml");
function getProjectConfiguration(configurationFilePath = "./genezio.yaml") {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield (0, file_1.checkYamlFileExists)())) {
            throw new Error("The configuration file does not exist.");
        }
        const genezioYamlPath = path_1.default.join(configurationFilePath);
        const configurationFileContentUTF8 = yield (0, file_1.readUTF8File)(genezioYamlPath);
        let configurationFileContent = null;
        try {
            configurationFileContent = yield (0, yaml_1.parse)(configurationFileContentUTF8);
        }
        catch (error) {
            throw new Error(`The configuration yaml file is not valid.\n${error}`);
        }
        const projectConfiguration = yield yamlProjectConfiguration_1.YamlProjectConfiguration.create(configurationFileContent);
        return projectConfiguration;
    });
}
exports.getProjectConfiguration = getProjectConfiguration;
